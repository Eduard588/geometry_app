# task1_point_projections.py
import streamlit as st
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")
st.title("üéØ –ù–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è: –ó–∞–¥–∞—á–∞ 1 ‚Äî –ü—Ä–æ–µ–∫—Ü–∏–∏ —Ç–æ—á–∫–∏")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
if "A" not in st.session_state:
    st.session_state.A = np.random.randint(20, 60, size=3)  # x, y, z
    st.session_state.task_type = np.random.choice([
        {"desc": "–Ω–∞ 10 –º–º –±–ª–∏–∂–µ –∏ –Ω–∞ 15 –º–º –≤—ã—à–µ", "dx": 0, "dy": -10, "dz": 15},
        {"desc": "–Ω–∞ 20 –º–º –¥–∞–ª—å—à–µ –∏ –Ω–∞ 10 –º–º –Ω–∏–∂–µ", "dx": 0, "dy": 10, "dz": -10},
        {"desc": "–Ω–∞ 15 –º–º –ø—Ä–∞–≤–µ–µ –∏ –Ω–∞ 5 –º–º –≤—ã—à–µ", "dx": 15, "dy": 0, "dz": 5},
    ])

A = st.session_state.A
x, y, z = A
task = st.session_state.task_type

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ B
B_true = (x + task["dx"], y + task["dy"], z + task["dz"])
Bx_true, By_true, Bz_true = B_true

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.write("### üìù –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:")
st.write(f"–î–∞–Ω–∞ —Ç–æ—á–∫–∞ A({int(x)}, {int(y)}, {int(z)}).")
st.write("1. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –ø—Ä–æ–µ–∫—Ü–∏–∏:")
st.write("   - **A‚ÇÅ** ‚Äî –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è (–Ω–∞ –ü1)")
st.write("   - **A‚ÇÇ** ‚Äî —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è (–Ω–∞ –ü2)")
st.write("   - **A‚ÇÉ** ‚Äî –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è (–Ω–∞ –ü3)")
st.write(f"2. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—á–∫—É B, –∫–æ—Ç–æ—Ä–∞—è {task['desc']} —Ç–æ—á–∫–∏ A.")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
st.write("### ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–µ–∫—Ü–∏–π —Ç–æ—á–∫–∏ A:")
col1, col2, col3 = st.columns(3)

with col1:
    st.write("**A‚ÇÅ (x, y)**")
    Ax1 = st.number_input("A‚ÇÅ_x", min_value=0, max_value=100, value=0, key="a1x")
    Ay1 = st.number_input("A‚ÇÅ_y", min_value=0, max_value=100, value=0, key="a1y")

with col2:
    st.write("**A‚ÇÇ (x, z)**")
    Ax2 = st.number_input("A‚ÇÇ_x", min_value=0, max_value=100, value=0, key="a2x")
    Az2 = st.number_input("A‚ÇÇ_z", min_value=0, max_value=100, value=0, key="a2z")

with col3:
    st.write("**A‚ÇÉ (y, z)**")
    Ay3 = st.number_input("A‚ÇÉ_y", min_value=0, max_value=100, value=0, key="a3y")
    Az3 = st.number_input("A‚ÇÉ_z", min_value=0, max_value=100, value=0, key="a3z")

st.write("### ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ B:")
colB1, colB2, colB3 = st.columns(3)
with colB1:
    Bx = st.number_input("B_x", min_value=0, max_value=100, value=0, key="bx")
with colB2:
    By = st.number_input("B_y", min_value=0, max_value=100, value=0, key="by")
with colB3:
    Bz = st.number_input("B_z", min_value=0, max_value=100, value=0, key="bz")

# –ö–Ω–æ–ø–∫–∏
check_col, new_col = st.columns([1, 1])
with check_col:
    check = st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
with new_col:
    if st.button("üîÑ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"):
        st.session_state.pop("A")
        st.rerun()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
if check:
    correct = True
    results = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ A‚ÇÅ
    if (Ax1, Ay1) == (x, y):
        results.append("A‚ÇÅ: ‚úÖ")
    else:
        results.append(f"A‚ÇÅ: ‚ùå (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: A‚ÇÅ({int(x)}, {int(y)}))")
        correct = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ A‚ÇÇ
    if (Ax2, Az2) == (x, z):
        results.append("A‚ÇÇ: ‚úÖ")
    else:
        results.append(f"A‚ÇÇ: ‚ùå (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: A‚ÇÇ({int(x)}, {int(z)}))")
        correct = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ A‚ÇÉ
    if (Ay3, Az3) == (y, z):
        results.append("A‚ÇÉ: ‚úÖ")
    else:
        results.append(f"A‚ÇÉ: ‚ùå (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: A‚ÇÉ({int(y)}, {int(z)}))")
        correct = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ B
    if (Bx, By, Bz) == B_true:
        results.append("B: ‚úÖ")
    else:
        results.append(f"B: ‚ùå (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: B({int(Bx_true)}, {int(By_true)}, {int(Bz_true)}))")
        correct = False

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if correct:
        st.success("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã.")
    else:
        for res in results:
            st.error(res)

    # === 2D –ß–µ—Ä—Ç—ë–∂ ===
    st.write("### üìê 2D-—á–µ—Ä—Ç—ë–∂ –ø—Ä–æ–µ–∫—Ü–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)")
    fig, axs = plt.subplots(2, 2, figsize=(12, 12))
    axs = axs.flatten()

    # –ü2 ‚Äî —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è (—Å–ª–µ–≤–∞, —Å–≤–µ—Ä—Ö—É): A‚ÇÇ –∏ B‚ÇÇ
    axs[0].scatter(x, z, c='blue', s=60)
    axs[0].text(x + 2, z, "A‚ÇÇ", fontsize=12, color='blue', weight='bold')
    axs[0].scatter(Bx_true, Bz_true, c='purple', s=60)
    axs[0].text(Bx_true + 2, Bz_true, "B‚ÇÇ", fontsize=12, color='purple', weight='bold')
    axs[0].set_xlim(0, 80)
    axs[0].set_ylim(0, 80)
    axs[0].grid(True, linestyle='--', alpha=0.6)
    axs[0].set_title("–ü2: –§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è")
    axs[0].set_xlabel("X")
    axs[0].set_ylabel("Z")

    # –ü3 ‚Äî –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è (—Å–ø—Ä–∞–≤–∞, —Å–≤–µ—Ä—Ö—É): A‚ÇÉ –∏ B‚ÇÉ
    axs[1].scatter(y, z, c='green', s=60)
    axs[1].text(y + 2, z, "A‚ÇÉ", fontsize=12, color='green', weight='bold')
    axs[1].scatter(By_true, Bz_true, c='purple', s=60)
    axs[1].text(By_true + 2, Bz_true, "B‚ÇÉ", fontsize=12, color='purple', weight='bold')
    axs[1].set_xlim(0, 80)
    axs[1].set_ylim(0, 80)
    axs[1].grid(True, linestyle='--', alpha=0.6)
    axs[1].set_title("–ü3: –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è")
    axs[1].set_xlabel("Y")
    axs[1].set_ylabel("Z")

    # –ü1 ‚Äî –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è (—Å–ª–µ–≤–∞, —Å–Ω–∏–∑—É): A‚ÇÅ –∏ B‚ÇÅ
    axs[2].scatter(x, y, c='red', s=60)
    axs[2].text(x + 2, y, "A‚ÇÅ", fontsize=12, color='red', weight='bold')
    axs[2].scatter(Bx_true, By_true, c='purple', s=60)
    axs[2].text(Bx_true + 2, By_true, "B‚ÇÅ", fontsize=12, color='purple', weight='bold')
    axs[2].set_xlim(0, 80)
    axs[2].set_ylim(0, 80)
    axs[2].invert_yaxis()  # –û—Å—å Y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–Ω–∏–∑
    axs[2].grid(True, linestyle='--', alpha=0.6)
    axs[2].set_title("–ü1: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è")
    axs[2].set_xlabel("X")
    axs[2].set_ylabel("Y")

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É
    fig.delaxes(axs[3])

    plt.tight_layout()
    st.pyplot(fig)

    # === 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
    st.write("### üßä 3D-–º–æ–¥–µ–ª—å")
    fig_3d = go.Figure()

    # –¢–æ—á–∫–∞ A
    fig_3d.add_trace(go.Scatter3d(
        x=[x], y=[y], z=[z],
        mode='markers+text',
        text=["A"],
        textposition="top center",
        marker=dict(size=8, color='red'),
        name="A"
    ))

    # –ü—Ä–æ–µ–∫—Ü–∏–∏ A
    fig_3d.add_trace(go.Scatter3d(
        x=[x], y=[y], z=[0],
        mode='markers+text',
        text=["A‚ÇÅ"],
        textposition="middle left",
        marker=dict(size=6, color='orange'),
        name="A‚ÇÅ"
    ))
    fig_3d.add_trace(go.Scatter3d(
        x=[x], y=[0], z=[z],
        mode='markers+text',
        text=["A‚ÇÇ"],
        textposition="top center",
        marker=dict(size=6, color='blue'),
        name="A‚ÇÇ"
    ))
    fig_3d.add_trace(go.Scatter3d(
        x=[0], y=[y], z=[z],
        mode='markers+text',
        text=["A‚ÇÉ"],
        textposition="top right",
        marker=dict(size=6, color='green'),
        name="A‚ÇÉ"
    ))

    # –¢–æ—á–∫–∞ B
    fig_3d.add_trace(go.Scatter3d(
        x=[Bx_true], y=[By_true], z=[Bz_true],
        mode='markers+text',
        text=["B"],
        textposition="top center",
        marker=dict(size=8, color='purple'),
        name="B"
    ))

    # –ü—Ä–æ–µ–∫—Ü–∏–∏ B
    fig_3d.add_trace(go.Scatter3d(
        x=[Bx_true], y=[By_true], z=[0],
        mode='markers+text',
        text=["B‚ÇÅ"],
        textposition="middle right",
        marker=dict(size=6, color='magenta'),
        name="B‚ÇÅ"
    ))
    fig_3d.add_trace(go.Scatter3d(
        x=[Bx_true], y=[0], z=[Bz_true],
        mode='markers+text',
        text=["B‚ÇÇ"],
        textposition="bottom center",
        marker=dict(size=6, color='magenta'),
        name="B‚ÇÇ"
    ))
    fig_3d.add_trace(go.Scatter3d(
        x=[0], y=[By_true], z=[Bz_true],
        mode='markers+text',
        text=["B‚ÇÉ"],
        textposition="top left",
        marker=dict(size=6, color='magenta'),
        name="B‚ÇÉ"
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 3D-—Å—Ü–µ–Ω—ã
    fig_3d.update_layout(
        scene=dict(
            xaxis=dict(title="X", range=[0, 80]),
            yaxis=dict(title="Y", range=[0, 80]),
            zaxis=dict(title="Z", range=[0, 80]),
            camera=dict(eye=dict(x=1.5, y=1.5, z=1.5))
        ),
        margin=dict(l=0, r=0, b=0, t=50),
        title="3D-–º–æ–¥–µ–ª—å: —Ç–æ—á–∫–∏ A –∏ B, –∏—Ö –ø—Ä–æ–µ–∫—Ü–∏–∏"
    )

    st.plotly_chart(fig_3d, use_container_width=True)